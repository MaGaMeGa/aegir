#!/usr/bin/env python3.6

import json
import zmq
import time
import sys
import select
from pprint import pprint

program = {'boiltime': 60,
           'endtemp': 80,
           'hops': [{'attime': 60, 'hopname': 'Hop 1', 'hopqty': 10, 'id': 5},
                    {'attime': 5, 'hopname': 'Hop 2', 'hopqty': 10, 'id': 6},
                    {'attime': 0, 'hopname': 'Hop 3', 'hopqty': 5, 'id': 7}],
           'id': 6,
           'mashsteps': [{'holdtime': 8, 'id': 16, 'orderno': 0, 'temperature': 45},
                         {'holdtime': 20, 'id': 17, 'orderno': 1, 'temperature': 64},
                         {'holdtime': 80, 'id': 18, 'orderno': 2, 'temperature': 68}],
           'name': 'Test 3',
           'starttemp': 37.5};

ctx = zmq.Context()
sock = ctx.socket(zmq.REQ)
sock.connect('tcp://127.0.0.1:42069')

def cmd(sock, cmd, data):
    zreq = {'command': cmd, 'data': data}
    pprint(["Sending", zreq])
    sock.send_json(zreq)
    zresp = sock.recv_json()
    return zresp

test = 'program'

if test == 'program':
    # see whether anything is loaded
    res = cmd(sock, 'getProgram', None)
    pprint(['Reply', res])
    # load some program
    res = cmd(sock, 'loadProgram', {'program': program, 'startat': 0, 'volume': 35})
    pprint(['Reply', res])
    # see whether anything is loaded
    res = cmd(sock, 'getProgram', None)
    pprint(['Reply', res])
    # wait for the preheat to finish
    while True:
        state = cmd(sock, 'getState', None)
        pprint(['Waiting for PreHeat to finish', state])
        if state['data']['state'] != 'PreHeat': break
        time.sleep(1)
    # wait for enter, then send hasmalts
    hasmalt = False
    while not hasmalt:
        state = cmd(sock, 'getState', None)
        pprint(['State', state])
        print("Press ENTER to hasmalts")
        si,_,_ = select.select([sys.stdin], [], [], 1.0)
        for fd in si:
            if fd == sys.stdin:
                sys.stdin.readline()
                hasmalt = True
                pass
            pass
        pass
    # now we have malt
    res = cmd(sock, 'hasMalt', None);
    pprint(['hasMalt result:', res])
    # now we are monitoring the brew process
    while True:
        state = cmd(sock, 'getState', None)
        pprint(['Waiting for Mashing to finish', state])
        time.sleep(1)

elif test == 'buzzer':
    cmd(sock, 'buzzer', {'state': 'pulsate',
                         'cycletime': 2.3,
                         'onratio': 0.4});
    time.sleep(10);
    cmd(sock, 'buzzer', {'state': 'pulsate',
                         'cycletime': 1.3,
                         'onratio': 0.6});
    time.sleep(10);
    cmd(sock, 'buzzer', {'state': 'off'});
